{"ast":null,"code":"var _jsxFileName = \"/Users/lewishollis/Documents/tfl-api/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\n\nimport React, { useState } from 'react';\nimport StopArrivals from './StopArrivals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedStop, setSelectedStop] = useState({\n    id: '940GZZLUEPY',\n    name: null\n  });\n  const handleSearch = query => {\n    // Perform the search operation and update the selected stop\n    // For simplicity, assuming the first result contains the relevant information\n    // You should adapt this logic based on your actual search implementation\n    const stopResult = performSearch(query);\n    setSelectedStop({\n      id: stopResult ? stopResult.id : null,\n      name: stopResult ? stopResult.commonName : null\n    });\n  };\n  const performSearch = query => {\n    // Perform the actual search using the TFL API or any other method\n    // Return the result, containing at least the stop ID and name\n    // Adjust this logic based on your actual search implementation\n    return {\n      id: '940GZZLUEPY',\n      commonName: 'Example Station'\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stop Arrivals App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search for a station...\",\n      onChange: e => handleSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StopArrivals, {\n      stopId: selectedStop.id,\n      stopName: selectedStop.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"7yayiUrb0E2iEYblzBc7o7JyPI4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","StopArrivals","jsxDEV","_jsxDEV","App","_s","selectedStop","setSelectedStop","id","name","handleSearch","query","stopResult","performSearch","commonName","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","value","stopId","stopName","_c","$RefreshReg$"],"sources":["/Users/lewishollis/Documents/tfl-api/src/App.js"],"sourcesContent":["// App.js\n\nimport React, { useState } from 'react';\nimport StopArrivals from './StopArrivals';\n\nconst App = () => {\n  const [selectedStop, setSelectedStop] = useState({ id: '940GZZLUEPY', name: null });\n\n  const handleSearch = (query) => {\n    // Perform the search operation and update the selected stop\n    // For simplicity, assuming the first result contains the relevant information\n    // You should adapt this logic based on your actual search implementation\n    const stopResult = performSearch(query);\n\n    setSelectedStop({\n      id: stopResult ? stopResult.id : null,\n      name: stopResult ? stopResult.commonName : null,\n    });\n  };\n\n  const performSearch = (query) => {\n    // Perform the actual search using the TFL API or any other method\n    // Return the result, containing at least the stop ID and name\n    // Adjust this logic based on your actual search implementation\n    return {\n      id: '940GZZLUEPY',\n      commonName: 'Example Station',\n    };\n  };\n\n  return (\n    <div>\n      <h1>Stop Arrivals App</h1>\n      <input\n        type=\"text\"\n        placeholder=\"Search for a station...\"\n        onChange={(e) => handleSearch(e.target.value)}\n      />\n\n      <StopArrivals stopId={selectedStop.id} stopName={selectedStop.name} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC;IAAEQ,EAAE,EAAE,aAAa;IAAEC,IAAI,EAAE;EAAK,CAAC,CAAC;EAEnF,MAAMC,YAAY,GAAIC,KAAK,IAAK;IAC9B;IACA;IACA;IACA,MAAMC,UAAU,GAAGC,aAAa,CAACF,KAAK,CAAC;IAEvCJ,eAAe,CAAC;MACdC,EAAE,EAAEI,UAAU,GAAGA,UAAU,CAACJ,EAAE,GAAG,IAAI;MACrCC,IAAI,EAAEG,UAAU,GAAGA,UAAU,CAACE,UAAU,GAAG;IAC7C,CAAC,CAAC;EACJ,CAAC;EAED,MAAMD,aAAa,GAAIF,KAAK,IAAK;IAC/B;IACA;IACA;IACA,OAAO;MACLH,EAAE,EAAE,aAAa;MACjBM,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EAED,oBACEX,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BhB,OAAA;MACEiB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,yBAAyB;MACrCC,QAAQ,EAAGC,CAAC,IAAKb,YAAY,CAACa,CAAC,CAACC,MAAM,CAACC,KAAK;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,eAEFhB,OAAA,CAACF,YAAY;MAACyB,MAAM,EAAEpB,YAAY,CAACE,EAAG;MAACmB,QAAQ,EAAErB,YAAY,CAACG;IAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnE,CAAC;AAEV,CAAC;AAACd,EAAA,CArCID,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAuCT,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}